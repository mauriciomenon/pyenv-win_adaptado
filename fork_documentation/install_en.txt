Install this fork on Windows

- No admin required.
- PATH (bin and shims) is set by the installer.
- Version cache is refreshed after install.

Method 0 - One-liner PowerShell (recommended, resilient)
PowerShell -NoProfile -ExecutionPolicy Bypass -Command "$u='https://raw.githubusercontent.com/mauriciomenon/pyenv-win_adaptado/master/pyenv-win/install-pyenv-win.ps1';$o=Join-Path $env:TEMP 'install-pyenv-win.ps1';for($i=1;$i -le 5;$i++){try{Invoke-WebRequest -UseBasicParsing -Headers @{'User-Agent'='Mozilla/5.0'} -Uri $u -OutFile $o -ErrorAction Stop;break}catch{if($_.Exception.Response -and $_.Exception.Response.StatusCode.value__ -eq 429){$ra=$_.Exception.Response.GetResponseHeader('Retry-After');if([int]::TryParse($ra,[ref]$s)){Start-Sleep -Seconds $s}else{Start-Sleep -Seconds ([int][math]::Pow(2,$i))}}else{throw}}};if(Test-Path $o){& $o}"

Execution policy friendly:
  - Check policy: Get-ExecutionPolicy -List
  - If blocked, run temporarily (no global change):
    PowerShell -NoProfile -ExecutionPolicy Bypass -Command "$u='https://raw.githubusercontent.com/mauriciomenon/pyenv-win_adaptado/master/pyenv-win/install-pyenv-win.ps1';$o=Join-Path $env:TEMP 'install-pyenv-win.ps1';for($i=1;$i -le 5;$i++){try{Invoke-WebRequest -UseBasicParsing -Headers @{'User-Agent'='Mozilla/5.0'} -Uri $u -OutFile $o -ErrorAction Stop;break}catch{if($_.Exception.Response -and $_.Exception.Response.StatusCode.value__ -eq 429){$ra=$_.Exception.Response.GetResponseHeader('Retry-After');if([int]::TryParse($ra,[ref]$s)){Start-Sleep -Seconds $s}else{Start-Sleep -Seconds ([int][math]::Pow(2,$i))}}else{throw}}};if(Test-Path $o){& $o}"

Method 0b - From CMD (no PS policy change)
  powershell -NoProfile -ExecutionPolicy Bypass -Command "$u='https://raw.githubusercontent.com/mauriciomenon/pyenv-win_adaptado/master/pyenv-win/install-pyenv-win.ps1';$o=Join-Path $env:TEMP 'install-pyenv-win.ps1';for($i=1;$i -le 5;$i++){try{Invoke-WebRequest -UseBasicParsing -Headers @{'User-Agent'='Mozilla/5.0'} -Uri $u -OutFile $o -ErrorAction Stop;break}catch{if($_.Exception.Response -and $_.Exception.Response.StatusCode.value__ -eq 429){$ra=$_.Exception.Response.GetResponseHeader('Retry-After');if([int]::TryParse($ra,[ref]$s)){Start-Sleep -Seconds $s}else{Start-Sleep -Seconds ([int][math]::Pow(2,$i))}}else{throw}}};if(Test-Path $o){& $o}"
  Or run the included helper: install.cmd

Method 1 - Git clone
git clone https://github.com/mauriciomenon/pyenv-win_adaptado.git %USERPROFILE%\.pyenv\pyenv-win
cscript //nologo %USERPROFILE%\.pyenv\pyenv-win\libexec\pyenv-update.vbs --ignore
cscript //nologo %USERPROFILE%\.pyenv\pyenv-win\libexec\pyenv-install.vbs --list | Select-Object -First 20

```cmd
git clone https://github.com/mauriciomenon/pyenv-win_adaptado.git %USERPROFILE%\.pyenv\pyenv-win
```

Method 2 - Release ZIP
1. Download ZIP of a tag of this fork
2. Extract into %USERPROFILE%\.pyenv\pyenv-win
3. Run update and list commands above

Use
- Update cache:
  cscript //nologo %USERPROFILE%\.pyenv\pyenv-win\libexec\pyenv-update.vbs --ignore
- List versions:
  cscript //nologo %USERPROFILE%\.pyenv\pyenv-win\libexec\pyenv-install.vbs --list
- Install amd64:
  cscript //nologo %USERPROFILE%\.pyenv\pyenv-win\libexec\pyenv-install.vbs 3.14.0
- Install ARM64:
  cscript //nologo %USERPROFILE%\.pyenv\pyenv-win\libexec\pyenv-install.vbs 3.14.0-arm64


## Commands after install (pyenv)

| Action           | Command                  | Copy |
|------------------|--------------------------|------|
| List installed   | `pyenv versions`         | pyenv versions |
| List available   | `pyenv install -l`       | pyenv install -l |
| Install version  | `pyenv install 3.14.0`   | pyenv install 3.14.0 |
| Uninstall        | `pyenv uninstall 3.14.0` | pyenv uninstall 3.14.0 |
| Set global       | `pyenv global 3.14.0`    | pyenv global 3.14.0 |
| Set local        | `pyenv local 3.14.0`     | pyenv local 3.14.0 |
| Show version     | `pyenv version`          | pyenv version |
| Which python     | `pyenv which python`     | pyenv which python |
| Rebuild shims    | `pyenv rehash`           | pyenv rehash |

pwsh examples
- Tip: 'pyenv install 3.13' resolves to the latest 3.13.x for your arch; 'pyenv install 3' resolves to the latest 3.x.y.

  # List installed
  pyenv versions
  # List available
  pyenv install -l
  # Install version
  pyenv install 3.10.11
  # Uninstall version
  pyenv uninstall 3.10.11
  # Set global
  pyenv global 3.10.11
  # Set local
  pyenv local 3.10.11
  # Show version
  pyenv version
  # Which python
  pyenv which python
  # Rebuild shims
  pyenv rehash

Immediate use in current session (if PATH not yet refreshed)
  setx is not needed; export only for this session:
  $env:PYENV = "$HOME\.pyenv\pyenv-win"
  $env:Path  = "$env:PYENV\bin;$env:PYENV\shims;$env:Path"
  pyenv --version

CMD fallback without PATH
  "%USERPROFILE%\.pyenv\pyenv-win\bin\pyenv.bat" --version
